%Decimal constant <- 7.00;
$Decimal global <- 13.00;

$Main init():
  #String capacityArray<3.00> <- <"Hello", "Herr", "Einstein">
  #Decimal boundaryArray<5.00> <- <4.00, 5.00, 6.00, 7.00, 8.00>
  
  #String message
  #Boolean isTrue <- true
  #Decimal number <- 1.00
  #Decimal novaNumero
  
  input(message)
  output("Hello ", message)
  
  number <- call mathematics(number)
  isTrue <- call truth(isTrue)
  
  novaNumero <- call ultimateNumber(add(add(constant, global), call mathematics(number)))
  
  call mutateNumber(divide(number, 9.00))
  call traverseArray(capacityArray)

$Func mathematics(Decimal number):
  number <- multiply(number, 2.00)
  number <- subtract(number, number)
  number <- add(number, 9.00)
  number <- divide(number, 3.00)
  
  #Decimal quickMaths <- subtract(add(2.00, 2.00), 1.00)
  number <- power(number, quickMaths)
  return number
  [end]

$Func truth(Boolean isTrue):
  verify(equals(isTrue, true)):
    return negate(call truth(false))
    [end]
  divert:
    return false
    [end]
  [end]

$Func ultimateNumber(Decimal numeroMagica):
  #Decimal numeroOriginale <- numeroMagica
  numeroMagica <- multiply(numeroMagica, 2.00)
  numeroMagica <- multiply(numeroMagica, 5.00)
  numeroMagica <- divide(numeroMagica, numeroOriginale)
  return add(numeroMagica, 3.00)
  [end]

$Func mutateNumber(Decimal number):
  #Decimal backupNo <- number
  interval(and(greater(number, 1.00), negate(equals(backupNo, 0.00)))):
    trigger(number):
      choice 3.00:
        number <- multiply(number, number)
        [end]
      choice 5.00:
        number <- subtract(add(number, 1.00), number)
        [end]
      choice 9.00:
        number <- add(number, 1.00)
        [end]
      choice 10.00: 
        number <- divide(number, 2.00)
        [end]
      standard:
        number <- 666.00
        [end]
      [end]
    [end]
  number <- call revampNumber()
  
  #Func revampNumber():
    #Decimal refiner <- 1.75
    return add(refiner, add(backupNo, number))
    [end]
  [end]

$Func traverseArray(String<> array):
  stepthru(#String extractor in array):
    output(array<extractor>)
    [end]
  step(#Decimal i <- 0.00 / less(i, length(array)) / inc(i)):
    output(array<i>)
    [end]
  [end]